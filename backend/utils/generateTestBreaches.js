/**
 * Generate Test Breach Data
 * 
 * This script creates a sample breach dataset for testing purposes.
 * It generates SHA-1 hashes of common passwords and writes them to a file
 * in the same format as the HIBP dataset.
 */
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

// Directory for breach data
const DATA_DIR = path.join(__dirname, '../data/breaches');
const OUTPUT_FILE = path.join(DATA_DIR, 'pwned-passwords-sha1-ordered-by-count.txt');

// Ensure the data directory exists
if (!fs.existsSync(DATA_DIR)) {
  console.log('Creating data directory...');
  fs.mkdirSync(DATA_DIR, { recursive: true });
}

// Common passwords to include in the test dataset
const commonPasswords = [
  '123456',
  'password',
  'qwerty',
  '12345678',
  '111111',
  'abc123',
  '123123',
  '12345',
  '1234567',
  '1234',
  'admin',
  'welcome',
  'monkey',
  'login',
  'letmein',
  'dragon',
  'master',
  'sunshine',
  'ashley',
  'bailey',
  'passw0rd',
  'shadow',
  '123456789',
  '654321',
  'superman',
  'qazwsx',
  'michael',
  'football',
  'baseball',
  'jennifer',
  'jordan',
  'hunter',
  'buster',
  'soccer',
  'harley',
  'batman',
  'andrew',
  'tigger',
  'charlie',
  'robert',
  'thomas',
  'hockey',
  'ranger',
  'daniel',
  'starwars',
  'klaster',
  'george',
  'summer',
  'secret',
  'abcd1234',
  'computer',
  'michelle',
  'jessica',
  'pepper',
  'zxcvbn',
  'freedom',
  'pass',
  'maggie',
  'hello',
  'justin',
  'ginger',
  'princess',
  'joshua',
  'cheese',
  'amanda',
  'summer',
  'love',
  'ashley',
  'nicole',
  'chelsea',
  'biteme',
  'matthew',
  'access',
  'yankees',
  'dallas',
  'austin',
  'thunder',
  'taylor',
  'matrix',
  'william',
  'corvette',
  'banana',
  'maverick',
  'sunshine',
  'silver',
  'sydney',
  'scotland',
  'gomez',
  'london',
  'fishing',
  'whatever',
  'icecream',
  'coffee',
  'welcome1',
  'phoenix',
  'mickey',
  'bailey',
  'knight',
  'iceman',
  'tigers',
  'purple',
  'andrea',
  'dakota',
  'aaaaaa',
  'player',
  'sunshine',
  'morgan',
  'starwars',
  'boomer',
  'cowboys',
  'edward',
  'charles',
  'girls',
  'booboo',
  'coffee',
  'xxxxxx',
  'bulldog',
  'ncc1701',
  'rabbit',
  'peanut',
  'john',
  'johnny',
  'gandalf',
  'spanky',
  'winter',
  'brandy',
  'compaq',
  'carlos',
  'tennis',
  'james',
  'mike',
  'brandon',
  'fender',
  'anthony',
  'ferrari',
  'cookie',
  'chicken',
  'bandit',
  'snickers',
  'olivia',
  'victoria',
  'samantha',
  'steelers',
  'joseph',
  'madison',
  'carolina',
  'arsenal',
  'password1',
  'Password1',
  'Password123',
  'P@ssw0rd',
  'P@ssword123',
  'Welcome123',
  'Admin123',
  'Admin@123',
  'Qwerty123',
  'Abc123',
  'Football123',
  'Baseball123',
  'Welcome1',
  'Welcome@123',
  'Password@123',
  'Password!123',
  'Passw0rd',
  'Passw0rd!',
  'Summer2023',
  'Winter2023',
  'Spring2023',
  'Fall2023',
  'Summer2022',
  'Winter2022',
  'Spring2022',
  'Fall2022',
  'Summer2021',
  'Winter2021',
  'Spring2021',
  'Fall2021',
  'Summer2020',
  'Winter2020',
  'Spring2020',
  'Fall2020',
  'Summer2019',
  'Winter2019',
  'Spring2019',
  'Fall2019',
  'Summer2018',
  'Winter2018',
  'Spring2018',
  'Fall2018',
  'Summer2017',
  'Winter2017',
  'Spring2017',
  'Fall2017',
  'Summer2016',
  'Winter2016',
  'Spring2016',
  'Fall2016',
  'Summer2015',
  'Winter2015',
  'Spring2015',
  'Fall2015',
  'Summer2014',
  'Winter2014',
  'Spring2014',
  'Fall2014',
  'Summer2013',
  'Winter2013',
  'Spring2013',
  'Fall2013',
  'Summer2012',
  'Winter2012',
  'Spring2012',
  'Fall2012',
  'Summer2011',
  'Winter2011',
  'Spring2011',
  'Fall2011',
  'Summer2010',
  'Winter2010',
  'Spring2010',
  'Fall2010',
  'Qwerty1',
  'Qwerty12',
  'Qwerty123',
  'Qwerty1234',
  'Qwerty12345',
  'Qwerty123456',
  'Qwerty@123',
  'Qwerty@1234',
  'Qwerty@12345',
  'Qwerty@123456',
  'Qwerty!123',
  'Qwerty!1234',
  'Qwerty!12345',
  'Qwerty!123456',
  'Qwerty#123',
  'Qwerty#1234',
  'Qwerty#12345',
  'Qwerty#123456',
  'Qwerty$123',
  'Qwerty$1234',
  'Qwerty$12345',
  'Qwerty$123456',
  'Qwerty%123',
  'Qwerty%1234',
  'Qwerty%12345',
  'Qwerty%123456',
  'Qwerty^123',
  'Qwerty^1234',
  'Qwerty^12345',
  'Qwerty^123456',
  'Qwerty&123',
  'Qwerty&1234',
  'Qwerty&12345',
  'Qwerty&123456',
  'Qwerty*123',
  'Qwerty*1234',
  'Qwerty*12345',
  'Qwerty*123456',
  'Qwerty(123',
  'Qwerty(1234',
  'Qwerty(12345',
  'Qwerty(123456',
  'Qwerty)123',
  'Qwerty)1234',
  'Qwerty)12345',
  'Qwerty)123456',
  'Qwerty-123',
  'Qwerty-1234',
  'Qwerty-12345',
  'Qwerty-123456',
  'Qwerty_123',
  'Qwerty_1234',
  'Qwerty_12345',
  'Qwerty_123456',
  'Qwerty+123',
  'Qwerty+1234',
  'Qwerty+12345',
  'Qwerty+123456',
  'Qwerty=123',
  'Qwerty=1234',
  'Qwerty=12345',
  'Qwerty=123456',
  'Qwerty[123',
  'Qwerty[1234',
  'Qwerty[12345',
  'Qwerty[123456',
  'Qwerty]123',
  'Qwerty]1234',
  'Qwerty]12345',
  'Qwerty]123456',
  'Qwerty{123',
  'Qwerty{1234',
  'Qwerty{12345',
  'Qwerty{123456',
  'Qwerty}123',
  'Qwerty}1234',
  'Qwerty}12345',
  'Qwerty}123456',
  'Qwerty|123',
  'Qwerty|1234',
  'Qwerty|12345',
  'Qwerty|123456',
  'Qwerty\\123',
  'Qwerty\\1234',
  'Qwerty\\12345',
  'Qwerty\\123456',
  'Qwerty;123',
  'Qwerty;1234',
  'Qwerty;12345',
  'Qwerty;123456',
  'Qwerty:123',
  'Qwerty:1234',
  'Qwerty:12345',
  'Qwerty:123456',
  'Qwerty\'123',
  'Qwerty\'1234',
  'Qwerty\'12345',
  'Qwerty\'123456',
  'Qwerty"123',
  'Qwerty"1234',
  'Qwerty"12345',
  'Qwerty"123456',
  'Qwerty<123',
  'Qwerty<1234',
  'Qwerty<12345',
  'Qwerty<123456',
  'Qwerty>123',
  'Qwerty>1234',
  'Qwerty>12345',
  'Qwerty>123456',
  'Qwerty,123',
  'Qwerty,1234',
  'Qwerty,12345',
  'Qwerty,123456',
  'Qwerty.123',
  'Qwerty.1234',
  'Qwerty.12345',
  'Qwerty.123456',
  'Qwerty/123',
  'Qwerty/1234',
  'Qwerty/12345',
  'Qwerty/123456',
  'Qwerty?123',
  'Qwerty?1234',
  'Qwerty?12345',
  'Qwerty?123456',
];

// Generate SHA-1 hash for a password
function generateSHA1(password) {
  return crypto.createHash('sha1').update(password).digest('hex').toUpperCase();
}

// Generate random occurrence count (weighted to make common passwords appear more often)
function generateOccurrenceCount(index) {
  // First passwords get higher counts
  if (index < 10) {
    return Math.floor(1000000 + Math.random() * 9000000);
  } else if (index < 50) {
    return Math.floor(100000 + Math.random() * 900000);
  } else if (index < 100) {
    return Math.floor(10000 + Math.random() * 90000);
  } else {
    return Math.floor(1000 + Math.random() * 9000);
  }
}

// Generate the test breach data
function generateTestBreachData() {
  console.log('Generating test breach data...');
  
  // Generate hash:count pairs
  const breachData = commonPasswords.map((password, index) => {
    const hash = generateSHA1(password);
    const count = generateOccurrenceCount(index);
    return `${hash}:${count}`;
  });
  
  // Sort by count (descending)
  breachData.sort((a, b) => {
    const countA = parseInt(a.split(':')[1], 10);
    const countB = parseInt(b.split(':')[1], 10);
    return countB - countA;
  });
  
  // Write to file
  fs.writeFileSync(OUTPUT_FILE, breachData.join('\n'));
  
  console.log(`Generated ${breachData.length} test breach entries.`);
  console.log(`File saved to: ${OUTPUT_FILE}`);
  console.log('\nYou can now run the import script:');
  console.log('node utils/importBreachData.js --import');
}

// Run the generator
generateTestBreachData();